<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <thing id="ra5CLnA111" name="Ability Score Increase" description="You can choose any one ability to increase by 1, and any other to increase by 1. You can increase either of these or a third, different score by 1." compset="RaceSpec" uniqueness="unique">
    <fieldval field="usrCandid1" value="component.BaseAttr"/>
    <fieldval field="usrCandid2" value="component.BaseAttr"/>
    <tag group="Custom" tag="AttrUp" name="AttrUp" abbrev="AttrUp"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="RaceSort" tag="Attribute" name="Attribute" abbrev="Attribute"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="ChooseSrc2" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="ra5CLnA111A"></bootstrap>
    <eval phase="PreAttr" priority="5000"><![CDATA[

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.Disable] <> 0)

      if (field[usrChosen1].ischosen <> 0) then
        field[usrChosen1].chosen.field[aStartMod].value += 1
        perform field[usrChosen1].chosen.assign[Custom.AttrUp]
        endif

      if (field[usrChosen2].ischosen <> 0) then
        field[usrChosen2].chosen.field[aStartMod].value += 1
        perform field[usrChosen1].chosen.assign[Custom.AttrUp]
        endif]]></eval>
    <evalrule phase="Validation" priority="10000" message="You must choose two different ability scores!" summary="You must choose two different ability scores!"><![CDATA[
      validif (field[usrChosen1].ischosen + field[usrChosen2].ischosen < 2)
      validif (field[usrChosen1].chosen.tagcount[Custom.AttrUp] < 2)
      validif (field[usrChosen2].chosen.tagcount[Custom.AttrUp] < 2)]]></evalrule>
    </thing>
  <thing id="r5CUAFairy" name="Fairy" compset="Race">
    <fieldval field="rLanguages" value="1"/>
    <usesource source="p5eFlkFeyUACP"/>
    <tag group="RaceSize" tag="Small11"/>
    <tag group="RaceType" tag="Normal"/>
    <bootstrap thing="lCommon"></bootstrap>
    <bootstrap thing="tpFey"></bootstrap>
    <bootstrap thing="ra5CLnA111"></bootstrap>
    <bootstrap thing="ra5CUAFrFlt"></bootstrap>
    <bootstrap thing="ra5CUAFrMgc"></bootstrap>
    <bootstrap thing="ra5CUAFrPsg"></bootstrap>
    <bootstrap thing="xFly">
      <autotag group="Value" tag="1"/>
      <autotag group="AbilModify" tag="Hover"/>
      </bootstrap>
    <eval phase="Final" priority="10001">hero.childfound[xFly].field[abValue].value = maximum(hero.childfound[Speed].field[tSpeedMod].value,hero.childfound[xFly].field[abValue].value)</eval>
    </thing>
  <thing id="ra5CLnA111A" name="Ability Score Increase (2)" description="Choose the score to add your remaining +1 into." compset="RaceSpec" uniqueness="unique">
    <fieldval field="usrCandid1" value="component.BaseAttr"/>
    <tag group="Custom" tag="AttrUp" name="AttrUp" abbrev="AttrUp"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="RaceSort" tag="Attribute" name="Attribute" abbrev="Attribute"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="User" tag="NoAutoName"/>
    <eval phase="PreAttr" priority="5000"><![CDATA[

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.Disable] <> 0)

      if (field[usrChosen1].ischosen <> 0) then
        field[usrChosen1].chosen.field[aStartMod].value += 1
        endif]]></eval>
    </thing>
  <thing id="r5CUARbtflk" name="Rabbitfolk" compset="Race">
    <fieldval field="rLanguages" value="1"/>
    <usesource source="p5eFlkFeyUACP"/>
    <tag group="RaceSize" tag="Medium0"/>
    <tag group="RaceType" tag="Normal"/>
    <tag group="ProfSkill" tag="skPercep"/>
    <bootstrap thing="ra5CLnA111"></bootstrap>
    <bootstrap thing="tpHumanoid"></bootstrap>
    <bootstrap thing="ra5CLinSize"></bootstrap>
    <bootstrap thing="lCommon"></bootstrap>
    <bootstrap thing="ra5CUARtTrg"></bootstrap>
    <bootstrap thing="ra5CUARtSns"></bootstrap>
    <bootstrap thing="ra5CUARtFtw"></bootstrap>
    <bootstrap thing="ra5CUARtHop"></bootstrap>
    </thing>
  <thing id="r5CUAOwlflk" name="Owlfolk" compset="Race">
    <fieldval field="rLanguages" value="1"/>
    <usesource source="p5eFlkFeyUACP"/>
    <tag group="RaceSize" tag="Medium0"/>
    <tag group="RaceType" tag="Normal"/>
    <tag group="ProfSkill" tag="skStealth"/>
    <bootstrap thing="ra5CLnA111"></bootstrap>
    <bootstrap thing="raDarkVis">
      <autotag group="Value" tag="90"/>
      </bootstrap>
    <bootstrap thing="tpHumanoid"></bootstrap>
    <bootstrap thing="ra5CLinSize"></bootstrap>
    <bootstrap thing="lCommon"></bootstrap>
    <bootstrap thing="ra5CUAOwSlF"></bootstrap>
    <bootstrap thing="ra5CUAOwFlt"></bootstrap>
    <bootstrap thing="ra5CUAOwMgS"></bootstrap>
    <bootstrap thing="xFly">
      <autotag group="Value" tag="1"/>
      </bootstrap>
    <eval phase="Final" priority="10001">hero.childfound[xFly].field[abValue].value = maximum(hero.childfound[Speed].field[tSpeedMod].value,hero.childfound[xFly].field[abValue].value)</eval>
    </thing>
  <thing id="r5CUAHobFey" name="Hobgoblin of the Feywild" compset="Race">
    <fieldval field="rLanguages" value="1"/>
    <usesource source="p5eFlkFeyUACP"/>
    <tag group="RaceSize" tag="Medium0"/>
    <tag group="RaceType" tag="Normal"/>
    <bootstrap thing="lCommon"></bootstrap>
    <bootstrap thing="ra5CLnA111"></bootstrap>
    <bootstrap thing="raDarkVis">
      <autotag group="Value" tag="60"/>
      </bootstrap>
    <bootstrap thing="tpHumanoid"></bootstrap>
    <bootstrap thing="ra5CUAHxRes">
      <assignval field="livename" value="Fey Ancestry"/>
      <assignval field="sbName" value="Fey Ancestry"/>
      <assignval field="shortname" value="Fey Ancestry"/>
      </bootstrap>
    <bootstrap thing="ra5CUAHbFrt"></bootstrap>
    <bootstrap thing="ra5CUAHbGft"></bootstrap>
    </thing>
  <thing id="ra5CUAFrFlt" name="Fairy Flight" description="Your flying speed equals your walking speed, and you can hover. This flight is magical, so you don&apos;t need to use your wings (if you have any)." compset="RaceSpec">
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="ra5CUAFrPsg" name="Fey Passage" description="You are able to squeeze through a space as narrow as 1 inch wide." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="ra5CUAHbFrt" name="Fortune from the Many" description="If you miss with an attack roll or fail an ability check or a saving throw, you can add a bonus to the roll equal to the number of allies you can see within 30 feet of you (a maximum bonus of +5). You can use this trait a number of times equaling your proficiency bonus, and you regain all spent uses you complete a long rest." compset="RaceSpec">
    <fieldval field="trkMax" value="1"/>
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="Usage" tag="LongRest"/>
    <eval phase="PostAttr" priority="5000"><![CDATA[~if we've been replaced, get out now 
doneif (tagis[Helper.Disable] <> 0)


field[trkMax].value = hero.childfound[ProfBonus].field[tProfBonus].value]]></eval>
    </thing>
  <thing id="ra5CUAHbGft" name="Fey Gift" description="You can use a bonus action to take the Help action. You can use this trait in this way a number of times equaling your proficiency bonus. You regain all spent uses when you complete a long rest.\n\nBeginning at 3rd level, choose one of these options each time you take the Help action, whether as a bonus action or an action:\nHospitality.\nYou and the target of your Help action each gain a number of temporary hit points equaling 1d6 plus your proficiency bonus.\nPassage.\nYou and the target of your Help action each increase your walking speeds by 10 feet until the beginning of your next turn.\nSpite.\nUntil the beginning of your next turn, the first time you or the target of your Help action hits a creature with an attack roll, that creature has disadvantage on the next attack roll that it makes within the next minute." compset="RaceSpec">
    <fieldval field="trkMax" value="1"/>
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="Bonus"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="Usage" tag="LongRest"/>
    <eval phase="PostAttr" priority="5000"><![CDATA[~if we've been replaced, get out now 
doneif (tagis[Helper.Disable] <> 0)


field[trkMax].value = hero.childfound[ProfBonus].field[tProfBonus].value]]></eval>
    </thing>
  <thing id="ra5CUAOwFlt" name="Nimble Flight" description="Your wings grant you a flying speed equal to your walking speed. When you fall, you can use your reaction to make a DC 10 Dexterity save to stop falling and fly in place until the beginning of your next turn." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="abAction" tag="Reaction"/>
    <tag group="FeatureTyp" tag="Reaction"/>
    </thing>
  <thing id="ra5CUAOwSlF" name="Silent Feathers" description="You are proficient in the Stealth skill." compset="RaceSpec">
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="ra5CUARtTrg" name="Hare-Trigger" description="Add your proficiency bonus to your initiative rolls." compset="RaceSpec">
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    <eval phase="PostAttr" priority="5000"><![CDATA[

~if we've been replaced, get out now 
doneif (tagis[Helper.Disable] <> 0)


#skillbonus[Initiative] += hero.childfound[ProfBonus].field[tProfBonus].value]]></eval>
    </thing>
  <thing id="ra5CUARtSns" name="Leporine Senses" description="You are proficient in the Perception skill." compset="RaceSpec">
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="ra5CUARtFtw" name="Lucky Footwork" description="When you fail a Dexterity saving throw, you take your reaction to roll and add 1d4 to the result, potentially turning the failure into a success." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="FeatureTyp" tag="Reaction"/>
    <tag group="abAction" tag="Reaction"/>
    <eval phase="First"><![CDATA[~if we've been replaced, get out now 
doneif (tagis[Helper.Disable] <> 0)

  #situational[hero.child[svDEX],"Can use reaction to add 1d4 to a failed save",field[thingname].text]]]></eval>
    </thing>
  <thing id="ra5CUARtHop" name="Rabbit Hop" description="Once during each of your turns when you walk at least 5 feet, you can hop. Roll 1d12 and move that many feet in a direction of your choice. This extra distance doesn&apos;t cost movement, but you can do this hop only if your speed isn&apos;t 0." compset="RaceSpec">
    <tag group="Helper" tag="ShowSpec"/>
    <tag group="FeatureTyp" tag="Special"/>
    <tag group="abAction" tag="None"/>
    </thing>
  <thing id="ra5CUAFrMgc" name="Fairy Magic" description="You know the {i}druidcraft{/i} and {i}faerie fire{/i} spells. You can cast {i}faerie fire{/i} without expending a spell slot, and you must complete a long rest before you can cast it this way again. You can also cast it using any spell slots you have. Choose from Intelligence, Wisdom, or Charisma as your spellcasting ability for these spells." compset="RaceSpec">
    <fieldval field="usrCandid1" value="component.BaseAttr &amp; (IsAttr.aWIS | IsAttr.aCHA | IsAttr.aINT)"/>
    <tag group="FeatureTyp" tag="Special" name="Special" abbrev="Special"/>
    <tag group="Helper" tag="ActivMenu" name="ActivMenu" abbrev="ActivMenu"/>
    <tag group="Helper" tag="ShowSpec" name="Show Spec" abbrev="Show Spec"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Custom" tag="OnlyIfCaster"/>
    <bootstrap thing="spDruidcra">
      <autotag group="Helper" tag="SpellLike"/>
      <autotag group="Helper" tag="Cantrip"/>
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <bootstrap thing="spFaerFire">
      <autotag group="Helper" tag="Free"/>
      <autotag group="Helper" tag="Memorized"/>
      <autotag group="Custom" tag="OnlyIfCaster"/>
      <autotag group="Hide" tag="Spell"/>
      </bootstrap>
    <bootstrap thing="spFaerFire">
      <autotag group="Helper" tag="SpellLike"/>
      <autotag group="Usage" tag="LongRest"/>
      <assignval field="trkMax" value="1"/>
      </bootstrap>
    <eval phase="Final"><![CDATA[
doneif (hero.tagis[Hero.Caster] = 0)

foreach pick in hero from BaseSpell where "Custom.OnlyIfCaster"
  perform eachpick.delete[Hide.Spell]
  nexteach]]></eval>
    </thing>
  <thing id="ra5CUAOwMgS" name="Magic Sight" description="You can cast the {i}detect magic{/i} spell, but only as a ritual. Choose from Intelligence, Wisdom, or Charisma as your spellcasting ability for this spell. You can also cast it normally with any spell slots you have." compset="RaceSpec">
    <fieldval field="usrCandid1" value="component.BaseAttr &amp; (IsAttr.aWIS | IsAttr.aCHA | IsAttr.aINT)"/>
    <tag group="FeatureTyp" tag="Special" name="Special" abbrev="Special"/>
    <tag group="Helper" tag="ActivMenu" name="ActivMenu" abbrev="ActivMenu"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Custom" tag="OnlyIfCaster"/>
    <tag group="Helper" tag="ShowSpec"/>
    <bootstrap thing="spDeteMagi">
      <autotag group="Helper" tag="SpellLike"/>
      <assignval field="sNameMod" value="ritual only"/>
      </bootstrap>
    <bootstrap thing="spDeteMagi">
      <autotag group="Helper" tag="Free"/>
      <autotag group="Helper" tag="Memorized"/>
      <autotag group="Custom" tag="OnlyIfCaster"/>
      <autotag group="Hide" tag="Spell"/>
      </bootstrap>
    <eval phase="Final"><![CDATA[
doneif (hero.tagis[Hero.Caster] = 0)

foreach pick in hero from BaseSpell where "Custom.OnlyIfCaster"
  perform eachpick.delete[Hide.Spell]
  nexteach]]></eval>
    </thing>
  </document>
